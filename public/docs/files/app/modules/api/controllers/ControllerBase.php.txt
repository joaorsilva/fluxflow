<?php
namespace Fluxflow\Modules\Api\Controllers;

use Phalcon\Mvc\Controller;
use Phalcon\Http\Request as Request;
use Phalcon\Mvc\Model as Model;

class ControllerBase extends Controller
{
    /**
     * @var integer Default return list page size 
     */
    const DEFAULT_PAGE_SIZE = 10;
    
    /**
     * @var array Possible filter operator 
     */
    private $operators = array(
        '='         => 'equal',
        '!='        => 'not equal',
        '>'         => 'bigger than',
        '<'         => 'smaller than',
        '>='        => 'bigger or equal to',
        '<='        => 'smaller or equal to',
        'like'      => 'like',
        'in'        => 'in',
        'not in'    => 'not in',
        'between'   => 'between'
    );

    /**
     * @var array Paging data 
     */
    private $paging = array(
        'page'          => 0,
        'page_size'     => ControllerBase::DEFAULT_PAGE_SIZE,
        'total_pages'   => 0
    );
    
    /**
     * @var array Data filter array 
     */
    private $filter = array(
        'deleted'       => array(
            'operator'  => '=',
            'value'     => 0
        )
    );

    /**
     * @var array Data sort array 
     */
    private $order = array(
        'id'         => 'ASC',
    );
    
    /**
     * @var array Data setting array. Contains all other data related arrays 
     */
    private $settings = array();
    
    /**
     * Initializes the base controller with the default data
     * 
     * @param string $className Child class name (controller).
     * @return 
     */
    public function initialize( string $className )
    {
        $settings = array(
            'paging'    => $this->paging,
            'filter'    => $this->filter,
            'order'     => $this->order
        );
        
        if ( $this->session->has( $className ) ) {
            $this->settings = $this->session->get( $className );
        } else {
            $this->session->set( $className, $this->settings );
        }
    }
    
    /**
     * Parses the request information and sanitises the request data. 
     * @param Phalcon\Http\Request $request The request object
     * @param \Phalcon\Mvc\Model $model The model
     * @return type 
     */
    public function parseSettings( Request $request, Model $model ) 
    {
        $val = $request->getQuery( 'page' , 'int' );
        if(!is_null($val))
        {    
            $this->settings['page'] = $val;
        }
        
        $val = $request->getQuery( 'page_size' , 'int' );
        if(!is_null($val))
        {    
            $this->settings['page_size'] = $val;
        }
        
        $val = $request->getQuery( 'filter' , 'string' );
        if( !is_null( $val ) && is_array( $val ) )
        {
            $this->settings['filter'] = $this->validateFieldArray( $val , $model );
        }
        
        $val = $request->getQuery('order','string');
        if( !is_null( $val ) && is_array( $val ) )
        {
            $this->settings['order'] = $this->validateFieldArray( $val , $model );
        }
        $this->session->set( $className, $this->settings );
        
        return $this->settings;
    }
    
    /**
     * Validates the filter and order array returning an array containing only
     * valid data.
     * 
     * @param array $fieldArray filter or order array.
     * @param Model $model The model
     * @return array filter or order array.
     * @throws Exception if model does not implement a valid columnMap() method
     */
    public function validateFieldArray( array $fieldArray , Model $model ) 
    {
        try 
        {
            $columnMap = $model->columnMap();
        }
        catch ( Exception $e ) 
        {
            $columnMap = NULL;
        }

        if( !$columnMap )
        {
            throw new Exception('Model ' . get_class($model) . ' does not implement a columnMap() method!');
        }
        
        $newArray = array();
        foreach( $fieldArray as $key => $value ) 
        {    
            if( array_search( $key , $columnMap ) ) 
            {
                if( !$value )
                    continue;
                
                if( is_array( $value ) )
                {
                    if( array_key_exists( 'value' , $value ) && array_key_exists( 'operator' , $value ) ) 
                    {
                        if( !$this->validateFilterOperator( $value ) )
                        {
                            continue;
                        }
                    }
                } 
                else if( is_string ( $value ) ) 
                {
                    if( strtolower( $value ) == 'asc' || strtolower( $value ) == 'desc' )
                    {
                        continue;
                    }
                }
                
                $newArray[] = array( $key => $value );
            }
        }
        return $newArray;
    }
    
    /**
     * Validates the filter field operand
     * @param array $value filter field array
     * @return boolean TRUE if the operand exists and it's valid FALSE otherwise.
     */
    public function validateFilterOperator( array $value )
    {
        if( array_key_exists( $value['operator'] ) && array_key_exists( $value['operator'] , $this->$operators ) )
        {
            return TRUE;
        }
        
        return FALSE;
    }        
    
    public function getSettings()
    {
        return $this->settings;
    }
}

